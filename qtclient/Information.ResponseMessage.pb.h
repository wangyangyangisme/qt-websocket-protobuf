// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Information.ResponseMessage.proto

#ifndef PROTOBUF_Information_2eResponseMessage_2eproto__INCLUDED
#define PROTOBUF_Information_2eResponseMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Information_2eResponseMessage_2eproto();
void protobuf_AssignDesc_Information_2eResponseMessage_2eproto();
void protobuf_ShutdownFile_Information_2eResponseMessage_2eproto();

class ResponseMessage;

// ===================================================================

class ResponseMessage : public ::google::protobuf::Message {
 public:
  ResponseMessage();
  virtual ~ResponseMessage();

  ResponseMessage(const ResponseMessage& from);

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseMessage& default_instance();

  void Swap(ResponseMessage* other);

  // implements Message ----------------------------------------------

  inline ResponseMessage* New() const { return New(NULL); }

  ResponseMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseMessage& from);
  void MergeFrom(const ResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // optional string format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // optional bool isSucceeded = 3;
  void clear_issucceeded();
  static const int kIsSucceededFieldNumber = 3;
  bool issucceeded() const;
  void set_issucceeded(bool value);

  // optional .google.protobuf.Any data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // optional string errors = 5;
  void clear_errors();
  static const int kErrorsFieldNumber = 5;
  const ::std::string& errors() const;
  void set_errors(const ::std::string& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  ::std::string* mutable_errors();
  ::std::string* release_errors();
  void set_allocated_errors(::std::string* errors);

  // @@protoc_insertion_point(class_scope:tutorial.ResponseMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::internal::ArenaStringPtr errors_;
  bool issucceeded_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Information_2eResponseMessage_2eproto();
  friend void protobuf_AssignDesc_Information_2eResponseMessage_2eproto();
  friend void protobuf_ShutdownFile_Information_2eResponseMessage_2eproto();

  void InitAsDefaultInstance();
  static ResponseMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseMessage

// optional string service = 1;
inline void ResponseMessage::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseMessage::service() const {
  // @@protoc_insertion_point(field_get:tutorial.ResponseMessage.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ResponseMessage.service)
}
inline void ResponseMessage::set_service(const char* value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ResponseMessage.service)
}
inline void ResponseMessage::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ResponseMessage.service)
}
inline ::std::string* ResponseMessage::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ResponseMessage.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseMessage::release_service() {
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ResponseMessage.service)
}

// optional string format = 2;
inline void ResponseMessage::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseMessage::format() const {
  // @@protoc_insertion_point(field_get:tutorial.ResponseMessage.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ResponseMessage.format)
}
inline void ResponseMessage::set_format(const char* value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ResponseMessage.format)
}
inline void ResponseMessage::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ResponseMessage.format)
}
inline ::std::string* ResponseMessage::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ResponseMessage.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseMessage::release_format() {
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ResponseMessage.format)
}

// optional bool isSucceeded = 3;
inline void ResponseMessage::clear_issucceeded() {
  issucceeded_ = false;
}
inline bool ResponseMessage::issucceeded() const {
  // @@protoc_insertion_point(field_get:tutorial.ResponseMessage.isSucceeded)
  return issucceeded_;
}
inline void ResponseMessage::set_issucceeded(bool value) {
  
  issucceeded_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ResponseMessage.isSucceeded)
}

// optional .google.protobuf.Any data = 4;
inline bool ResponseMessage::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void ResponseMessage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& ResponseMessage::data() const {
  // @@protoc_insertion_point(field_get:tutorial.ResponseMessage.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* ResponseMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.ResponseMessage.data)
  return data_;
}
inline ::google::protobuf::Any* ResponseMessage::release_data() {
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ResponseMessage::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.ResponseMessage.data)
}

// optional string errors = 5;
inline void ResponseMessage::clear_errors() {
  errors_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseMessage::errors() const {
  // @@protoc_insertion_point(field_get:tutorial.ResponseMessage.errors)
  return errors_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_errors(const ::std::string& value) {
  
  errors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ResponseMessage.errors)
}
inline void ResponseMessage::set_errors(const char* value) {
  
  errors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ResponseMessage.errors)
}
inline void ResponseMessage::set_errors(const char* value, size_t size) {
  
  errors_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ResponseMessage.errors)
}
inline ::std::string* ResponseMessage::mutable_errors() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ResponseMessage.errors)
  return errors_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseMessage::release_errors() {
  
  return errors_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_allocated_errors(::std::string* errors) {
  if (errors != NULL) {
    
  } else {
    
  }
  errors_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errors);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ResponseMessage.errors)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Information_2eResponseMessage_2eproto__INCLUDED
